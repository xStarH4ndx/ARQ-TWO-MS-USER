syntax = "proto3";

package users;

service UsersService {
  // Crear perfil de usuario
  rpc CreateUserProfile(CreateUserRequest) returns (CreateUserResponse);
  
  // Buscar usuarios
  rpc FindAllUsers(FindAllUsersRequest) returns (FindAllUsersResponse);
  rpc FindOneUser(FindOneUserRequest) returns (FindOneUserResponse);
  rpc FindByAuthId(FindByAuthIdRequest) returns (FindByAuthIdResponse);
  rpc FindByEmail(FindByEmailRequest) returns (FindByEmailResponse);
  
  // Actualizar usuarios
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc UpdateByAuthId(UpdateByAuthIdRequest) returns (UpdateByAuthIdResponse);
  
  // Eliminar usuarios
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc DeleteByAuthId(DeleteByAuthIdRequest) returns (DeleteByAuthIdResponse);
  
  // Búsquedas especiales
  rpc SearchUsersByName(SearchUsersByNameRequest) returns (SearchUsersByNameResponse);
  rpc GetUserStats(GetUserStatsRequest) returns (GetUserStatsResponse);
  
  // Verificar existencia
  rpc UserExists(UserExistsRequest) returns (UserExistsResponse);
  rpc UserExistsByAuthId(UserExistsByAuthIdRequest) returns (UserExistsByAuthIdResponse);
}

// Mensaje User basado en tu entidad
message User {
  string id = 1;
  string authId = 2;
  string firstName = 3;
  string lastName = 4;
  string email = 5;
  bool isActive = 6;
  string lastLogin = 7;  // ISO string format
  string createdAt = 8;  // ISO string format
  string updatedAt = 9;  // ISO string format
}

// Mensajes para datos de actualización
message UpdateUserData {
  optional string firstName = 1;
  optional string lastName = 2;
  optional string email = 3;
  optional bool isActive = 4;
  optional string lastLogin = 5;
}

// Create User Profile
message CreateUserRequest {
  string authId = 1;
  string firstName = 2;
  string lastName = 3;
  string email = 4;
}

message CreateUserResponse {
  User user = 1;
}

// Find All Users
message FindAllUsersRequest {
  optional int32 limit = 1;
  optional int32 offset = 2;
}

message FindAllUsersResponse {
  repeated User users = 1;
  int32 total = 2;
}

// Find One User
message FindOneUserRequest {
  string id = 1;
}

message FindOneUserResponse {
  User user = 1;
}

// Find By Auth ID
message FindByAuthIdRequest {
  string authId = 1;
}

message FindByAuthIdResponse {
  User user = 1;
  bool found = 2;
}

// Find By Email
message FindByEmailRequest {
  string email = 1;
}

message FindByEmailResponse {
  User user = 1;
  bool found = 2;
}

// Update User
message UpdateUserRequest {
  string id = 1;
  UpdateUserData updateData = 2;
}

message UpdateUserResponse {
  User user = 1;
}

// Update By Auth ID
message UpdateByAuthIdRequest {
  string authId = 1;
  UpdateUserData updateData = 2;
}

message UpdateByAuthIdResponse {
  User user = 1;
}

// Delete User
message DeleteUserRequest {
  string id = 1;
}

message DeleteUserResponse {
  bool success = 1;
}

// Delete By Auth ID
message DeleteByAuthIdRequest {
  string authId = 1;
}

message DeleteByAuthIdResponse {
  bool success = 1;
}

// Search Users By Name
message SearchUsersByNameRequest {
  string name = 1;
  optional int32 limit = 2;
}

message SearchUsersByNameResponse {
  repeated User users = 1;
}

// Get User Stats
message GetUserStatsRequest {
  // Empty - no parameters needed
}

message GetUserStatsResponse {
  int32 totalUsers = 1;
  int32 recentUsers = 2;
}

// User Exists
message UserExistsRequest {
  string id = 1;
}

message UserExistsResponse {
  bool exists = 1;
}

// User Exists By Auth ID
message UserExistsByAuthIdRequest {
  string authId = 1;
}

message UserExistsByAuthIdResponse {
  bool exists = 1;
}